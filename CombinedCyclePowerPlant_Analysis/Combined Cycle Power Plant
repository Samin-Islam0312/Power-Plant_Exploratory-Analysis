{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1xOYtzZW08c8LBIKT-4b-3g2ZJIkCRSGU","authorship_tag":"ABX9TyOg4omrx7PJzSSQgzjGw95h"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z4-Fh_lessX6","executionInfo":{"status":"ok","timestamp":1664227721724,"user_tz":-360,"elapsed":4032,"user":{"displayName":"Samin Islam","userId":"11473829011766436474"}},"outputId":"601644ae-2f2b-4afc-9b10-4262b3ea3649"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["The dataset contains 9568 data points collected from a Combined Cycle Power Plant over 6 years (2006-2011) when the power plant was set to work with a full load.\n","A combined-cycle power plant (CCPP) is composed of gas turbines (GT), steam turbines (ST) and heat recovery steam generators. In a CCPP, the electricity is generated by gas and steam turbines, which are combined in one cycle, and is transferred from one turbine to another. While the Vacuum is collected from and has an effect on the Steam Turbine, the other three of the ambient variables affect the GT performance."],"metadata":{"id":"ZxTRMl9QvyvW"}},{"cell_type":"markdown","source":["Attribute Information(Taken from above link):\n","Features consist of hourly average ambient variables\n","– Temperature (T) in the range 1.81°C and 37.11°C.\n","– Ambient Pressure (AP) in the range 992.89-1033.30 millibar.\n","\n","– Relative Humidity (RH) in the range 25.56% to 100.16%.\n","– Exhaust Vacuum (V) in the range 25.36-81.56 cm Hg.\n","– Net hourly electrical energy output (PE) 420.26-495.76 MW.\n","\n","https://archive.ics.uci.edu/ml/datasets/Combined+Cycle+Power+Plant "],"metadata":{"id":"wsW9tv5hv1Z-"}},{"cell_type":"markdown","source":["Predict Net hourly electrical energy output (PE) and Exhaust Vacuum (V)\n","with Temperature (T), Ambient Pressure (AP) and Relative Humidity (RH) as inputs."],"metadata":{"id":"UZ61e_KPvete"}},{"cell_type":"code","source":["# importing libraries\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import MinMaxScaler\n","import matplotlib.pyplot as plt"],"metadata":{"id":"LWKeJBKdsSFg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_excel('/content/drive/MyDrive/Projects/CCPP_Data/ccpp_data.xlsx')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"I2IgiyN7th93","executionInfo":{"status":"ok","timestamp":1664228150956,"user_tz":-360,"elapsed":676,"user":{"displayName":"Samin Islam","userId":"11473829011766436474"}},"outputId":"c4c5aa3c-535f-4ad2-f8e9-7d2f3ed4296f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      AT      V       AP     RH      PE\n","0  14.96  41.76  1024.07  73.17  463.26\n","1  25.18  62.96  1020.04  59.08  444.37\n","2   5.11  39.40  1012.16  92.14  488.56\n","3  20.86  57.32  1010.24  76.64  446.48\n","4  10.82  37.50  1009.23  96.62  473.90"],"text/html":["\n","  <div id=\"df-b4be21cf-fc1c-4f2c-9707-b071e2c750f6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AT</th>\n","      <th>V</th>\n","      <th>AP</th>\n","      <th>RH</th>\n","      <th>PE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>14.96</td>\n","      <td>41.76</td>\n","      <td>1024.07</td>\n","      <td>73.17</td>\n","      <td>463.26</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25.18</td>\n","      <td>62.96</td>\n","      <td>1020.04</td>\n","      <td>59.08</td>\n","      <td>444.37</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.11</td>\n","      <td>39.40</td>\n","      <td>1012.16</td>\n","      <td>92.14</td>\n","      <td>488.56</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>20.86</td>\n","      <td>57.32</td>\n","      <td>1010.24</td>\n","      <td>76.64</td>\n","      <td>446.48</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10.82</td>\n","      <td>37.50</td>\n","      <td>1009.23</td>\n","      <td>96.62</td>\n","      <td>473.90</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4be21cf-fc1c-4f2c-9707-b071e2c750f6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4be21cf-fc1c-4f2c-9707-b071e2c750f6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4be21cf-fc1c-4f2c-9707-b071e2c750f6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Function to get outputs \n","\n","def get_outputs(data):\n","  y1 = data.pop('PE')\n","  y1 = np.array(y1)\n","\n","  y2 = data.pop('V')\n","  y2 = np.array(y2)\n","\n","  return y1, y2"],"metadata":{"id":"QSmR10ggt4vC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split data into train/test (80/20)\n","\n","train, test = train_test_split(df, test_size = 0.2, random_state = 1)\n","\n","y_train = get_outputs(train)\n","y_test = get_outputs(test)"],"metadata":{"id":"JDvZjkgrvSw2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Scaling inputs \n","min_max = MinMaxScaler()\n","\n","X_train = min_max.fit_transform(train)\n","X_test = min_max.transform(test)"],"metadata":{"id":"Uz6Wt8qowXjf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Importing keras \n","from tensorflow.keras.models import Model # using funtional API\n","from tensorflow.keras.layers import Input, Dense\n","from tensorflow.keras.optimizers import Adam"],"metadata":{"id":"MWhd9FY9wloe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 2 hidden layers, including a branched layer with 10 nodes each\n","\n","input_layer = Input(shape=(3,), name = 'input_layer')\n","\n","layer_1 = Dense(10, activation = \"relu\", name = 'Hidden_layer_1')(input_layer)\n","layer_2 = Dense(10, activation = \"relu\", name = 'Hidden_layer_2')(layer_1)\n","\n","# 1st output layer\n","y1_output = Dense(1, activation = \"linear\", name ='y1_output')(layer_2)\n","\n","branched_layer = Dense(10, activation = \"relu\", name = 'Branched_layer')(layer_2)\n","y2_output = Dense(1, activation = \"linear\", name = 'y2_output')(branched_layer)\n","\n","# Defining the model\n","model = Model(inputs = input_layer, outputs = [y1_output, y2_output])\n"],"metadata":{"id":"n6MVyNYVw6yu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oftXJeAFx8kO","executionInfo":{"status":"ok","timestamp":1664229102373,"user_tz":-360,"elapsed":646,"user":{"displayName":"Samin Islam","userId":"11473829011766436474"}},"outputId":"a9df3310-3a32-42c0-bb91-83d8e252def6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_layer (InputLayer)       [(None, 3)]          0           []                               \n","                                                                                                  \n"," Hidden_layer_1 (Dense)         (None, 10)           40          ['input_layer[0][0]']            \n","                                                                                                  \n"," Hidden_layer_2 (Dense)         (None, 10)           110         ['Hidden_layer_1[0][0]']         \n","                                                                                                  \n"," Branched_layer (Dense)         (None, 10)           110         ['Hidden_layer_2[0][0]']         \n","                                                                                                  \n"," y1_output (Dense)              (None, 1)            11          ['Hidden_layer_2[0][0]']         \n","                                                                                                  \n"," y2_output (Dense)              (None, 1)            11          ['Branched_layer[0][0]']         \n","                                                                                                  \n","==================================================================================================\n","Total params: 282\n","Trainable params: 282\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# Using optimizer\n","\n","model.compile(optimizer = 'adam', loss = {'y1_output' : 'mse', 'y2_output': 'mse'})\n","model.fit(X_train, y_train, epochs = 1000, batch_size = 128, validation_data = (X_test, y_test))"],"metadata":{"id":"CfDzduxGyM2m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Let's predict\n","\n","predictions = model.predict(X_test)\n","predicted_energy = predictions[0]\n","predicted_vaccum = predictions[1]"],"metadata":{"id":"qm1EB61eypTu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scatter plot for actual VS predicted energy\n","\n","plt.scatter(y_test[0], predicted_energy)\n","plt.xlabel('Actual Energy output')\n","plt.ylabel('Predicted Energy output')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"h5T-VEZO0z93","executionInfo":{"status":"ok","timestamp":1664229874061,"user_tz":-360,"elapsed":504,"user":{"displayName":"Samin Islam","userId":"11473829011766436474"}},"outputId":"f2fc7e09-b2cc-418d-b96b-f4d412628740"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Predicted Energy output')"]},"metadata":{},"execution_count":33},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Scatter Plot for actual VS predicted Exhausted vaccum\n","\n","plt.scatter(y_test[1], predicted_vaccum)\n","plt.xlabel('Actual Exhausted Vaccum')\n","plt.ylabel('Predicted Exhausted Vaccum')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"CryJ2BVz1JMd","executionInfo":{"status":"ok","timestamp":1664229952971,"user_tz":-360,"elapsed":512,"user":{"displayName":"Samin Islam","userId":"11473829011766436474"}},"outputId":"df475acc-7b4c-46e0-e1eb-31cb4b601efb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Predicted Exhausted Vaccum')"]},"metadata":{},"execution_count":34},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["https://www.bmc.com/blogs/mean-squared-error-r2-and-variance-in-regression-analysis/ \n","\n","\n","https://www.bmc.com/blogs/bias-variance-machine-learning/ "],"metadata":{"id":"Z5R3jw0i5nO8"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from sklearn import linear_model\n","import numpy as np\n","from sklearn.metrics import mean_squared_error, r2_score\n","reg = linear_model.LinearRegression()\n","ar = np.array([[[1],[2],[3]], [[2.01],[4.03],[6.04]]])\n","y = ar[1,:]\n","x = ar[0,:]\n","reg.fit(x,y)\n","print('Coefficients: \\n', reg.coef_)\n","xTest = np.array([[4],[5],[6]])\n","ytest =  np.array([[9],[8.5],[14]])\n","preds = reg.predict(xTest)\n","print(\"R2 score : %.2f\" % r2_score(ytest,preds))\n","print(\"Mean squared error: %.2f\" % mean_squared_error(ytest,preds))\n","er = []\n","g = 0\n","for i in range(len(ytest)):\n","  print( \"actual=\", ytest[i], \" observed=\", preds[i])\n","  x = (ytest[i] - preds[i]) **2\n","  er.append(x)\n","  g = g + x\n","x = 0\n","for i in range(len(er)):\n","  x = x + er[i]\n","print (\"MSE\", x / len(er))\n","v = np.var(er)\n","print (\"variance\", v)\n","print (\"average of errors \", np.mean(er))\n","m = np.mean(ytest)\n","print (\"average of observed values\", m)\n","y = 0\n","for i in range(len(ytest)):\n","  y = y + ((ytest[i] - m) ** 2)\n","print (\"total sum of squares\", y)\n","print (\"ẗotal sum of residuals \", g)\n","print (\"r2 calculated\", 1 - (g / y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zDJnhOLP1cfO","executionInfo":{"status":"ok","timestamp":1664231016103,"user_tz":-360,"elapsed":521,"user":{"displayName":"Samin Islam","userId":"11473829011766436474"}},"outputId":"ccff183c-6e76-419b-87ab-017a8260b0db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficients: \n"," [[2.015]]\n","R2 score : 0.62\n","Mean squared error: 2.34\n","actual= [9.]  observed= [8.05666667]\n","actual= [8.5]  observed= [10.07166667]\n","actual= [14.]  observed= [12.08666667]\n","MSE [2.34028611]\n","variance 1.2881398892129672\n","average of errors  2.340286111111112\n","average of observed values 10.5\n","total sum of squares [18.5]\n","ẗotal sum of residuals  [7.02085833]\n","r2 calculated [0.62049414]\n"]}]},{"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Dense, Activation\n","\n","model = Sequential([\n","    Dense(5, input_shape=(3,), activation = 'relu'),\n","    Dense(2, activation = 'softmax')\n","])\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O3u_cB8z4y_H","executionInfo":{"status":"ok","timestamp":1664233595072,"user_tz":-360,"elapsed":409,"user":{"displayName":"Samin Islam","userId":"11473829011766436474"}},"outputId":"1884eb4e-616c-4973-a710-69e3d70f2623"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_8 (Dense)             (None, 5)                 20        \n","                                                                 \n"," dense_9 (Dense)             (None, 2)                 12        \n","                                                                 \n","=================================================================\n","Total params: 32\n","Trainable params: 32\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]}]}